// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSInit
#pragma kernel CSMain

#define GROUP_SIZE_X 32
#define GROUP_SIZE_Y 32

RWTexture2D<float4> Result;

float rand(float2 co) {
    return 0.5 + (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 0.5;
}

float4 Color;

uniform int GenerationType;

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void CSInit(uint3 id : SV_DispatchThreadID) {
    switch (GenerationType) {
    case 0:  // Random
        Result[id.xy] = rand(id.xy) > 0.75 ? Color : float4(0, 0, 0, 1);
        break;
    case 1:  // FullTexture
        Result[id.xy] = Color;  // Placeholder for FullTexture generation
        break;
    case 2:  // RPentomino
        // Handle RPentomino generation
        // Set Result[id.xy] accordingly
        break;
    case 3:  // Acorn
        // Handle Acorn generation
        // Set Result[id.xy] accordingly
        break;
    case 4:  // GosperGun
        // Handle GosperGun generation
        // Set Result[id.xy] accordingly
        break;
    default:
        Result[id.xy] = rand(id.xy) > 0.75 ? Color : float4(0, 0, 0, 1); //Default to Random
        break;
    }
}

[numthreads(GROUP_SIZE_X, GROUP_SIZE_Y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    int sum = 0;

    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            if (x == 0 && y == 0) continue;
            float2 position = float2(id.x, id.y);
            float2 offset = float2(x, y);
            float2 newPosition = position + offset;

            float4 result = Result[newPosition];
            if (result.x > 0 || result.y > 0 || result.x > 0) {
                sum += 1;
            } else {
                sum += 0;
            }
            
            /*
            float resultX = Result[newPosition].x;
            if (resultX > 0) {
                sum += 1;
            } else {
                sum += 0;
            }
            */
        }
    }

    // Use the Color directly
    float4 currentResult = Result[id.xy];

    if ((currentResult.x > 0 && (sum == 2 || sum == 3)) || (currentResult.x == 0 && sum == 3))
    {
        // If the conditions are met, set the color to the specified Color
        Result[id.xy] = Color;
    }
    
    if (((currentResult.x > 0 || currentResult.y > 0 || currentResult.z > 0) && (sum == 2 || sum == 3)) || ((currentResult.x == 0 && currentResult.y == 0 && currentResult.z == 0) && sum == 3))
    {
        // If the conditions are met, set the color to the specified Color
        Result[id.xy] = Color;
    }
    else
    {
        // If the conditions are not met, set the color to black (float4(0, 0, 0, 1))
        Result[id.xy] = float4(0, 0, 0, 1);
    }
}
